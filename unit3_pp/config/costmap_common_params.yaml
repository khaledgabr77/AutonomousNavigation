max_obstacle_height: 0.6 #2.0

# Obstacle Cost Shaping (http://wiki.ros.org/costmap_2d/hydro/inflation)
# robot_radius: 0.295  # distance a circular robot should be clear of the obstacle (kobuki: 0.18)
# footprint: [[x0, y0], [x1, y1], ... [xn, yn]]  # if the robot is not circular
footprint: [[-0.25,-0.20 ], [-0.25, 0.20,], [0.25, 0.20], [0.25, -0.20]]
# footprint: [[0.0,-0.21],[0.18,-0.21],[0.23,-0.15],[0.25,-0.12],[0.26,-0.10],[0.27,-0.08],[0.28,-0.05],[0.285,-0.03],[0.29, 0.0],
# [0.285,0.03],[0.28,0.05],[0.27,0.08],[0.26,0.10],[0.25,0.12],[0.23,0.15],[0.18,0.21],[0.0,0.21]
# ,[-0.18,0.21],[-0.23,0.15],[-0.25,0.12],[-0.26,0.10],[-0.27,0.08],[-0.28,0.05],[-0.285,0.03],[-0.29, 0.0]
# ,[-0.285,-0.03],[-0.28,-0.05],[-0.27,-0.08],[-0.26,-0.10],[-0.25,-0.12],[-0.23,-0.15],[-0.18,-0.21],[-0.0,-0.21]]
#footprint_padding: 0.01


laser_layer:
  observation_sources:  scan 
  scan:
    data_type: LaserScan
    topic: scan_filtered
    marking: true
    clearing: true
    min_obstacle_height: 0.05
    max_obstacle_height: 0.35
    obstacle_range: 4.0
    raytrace_range: 5.0
  # for debugging only, let's you see the entire voxel grid

#cost_scaling_factor and inflation_radius were now moved to the inflation_layer ns
inflation_layer:
  enabled:              true
  cost_scaling_factor:  10  # exponential rate at which the obstacle cost drops off (default: 10)
  inflation_radius:     0.4  # max. distance from an obstacle at which costs are incurred for planning paths.

static_layer:
  enabled:              true
  map_topic: /map
  subscribe_to_updates: true
